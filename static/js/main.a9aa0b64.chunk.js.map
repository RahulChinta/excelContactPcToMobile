{"version":3,"sources":["components/UI/Checkbox.module.css","components/UI/Button.module.css","components/UI/CheckboxList.module.css","components/UI/Checkbox.js","components/UI/Button.js","components/UI/CheckboxList.js","components/ContactDetails.js","App.js","index.js"],"names":["module","exports","Checkbox","props","className","classes","list","input","type","onClick","onClickHandler","checked","isChecked","value","id","Button","onButtonClick","buttons","CheckboxList","onCheckboxClickHandler","event","target","checkboxColumn","checkboxList","find","item","name","onAddContactHandler","isMobileNumber","checkboxListData","map","index","container","filteredColumnList","filter","submitList","ContactDetails","useState","currentNumberIndex","setCurrentNumberIndex","dataLength","data","length","columnList","content","href","prev","App","paraData","setParaData","inputLabel","setInputLabel","loading","setLoading","excelColumnList","setExcelColumnList","columnsData","setColumnsData","fileInputRef","useRef","useEffect","arrangedColumnList","ref","accept","style","display","onChange","files","color","height","width","htmlFor","current","click","file","reader","FileReader","RABS","readAsBinaryString","onload","e","bstr","result","workbook","XLSX","wsName","SheetNames","ws","Sheets","console","log","sheet_to_json","header","readAsArrayBuffer","filterColumnList","column","columnData","push","i","ReactDOM","render","Fragment","document","getElementById"],"mappings":"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","file":"static/js/main.a9aa0b64.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Checkbox_input__1vlLz\",\"list\":\"Checkbox_list__1WB-U\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttons\":\"Button_buttons__1F4Il\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"CheckboxList_container__EIXWD\"};","import classes from \"./Checkbox.module.css\";\r\n\r\nconst Checkbox = (props) => {\r\n  return (\r\n    <li className={classes.list}>\r\n      <input\r\n        className={classes.input}\r\n        type=\"checkbox\"\r\n        onClick={props.onClickHandler}\r\n        checked={props.isChecked}\r\n        value={props.value}\r\n        id={props.id}\r\n      />\r\n      <label>{props.value}</label>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default Checkbox;\r\n","import classes from \"./Button.module.css\";\r\n\r\nconst Button = (props) => {\r\n  return (\r\n    <button\r\n      type={props.type || \"button\"}\r\n      onClick={props.onButtonClick}\r\n      className={classes.buttons}\r\n    >\r\n      {props.value}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import Checkbox from \"./Checkbox\";\r\nimport Button from \"./Button\";\r\nimport classes from \"./CheckboxList.module.css\";\r\n\r\nconst CheckboxList = (props) => {\r\n  const onCheckboxClickHandler = (event) => {\r\n    const { checked, value } = event.target;\r\n    const checkboxColumn = props.checkboxList.find(\r\n      (item) => item.name === value\r\n    );\r\n    if (checkboxColumn) {\r\n      checkboxColumn.isChecked = checked;\r\n    }\r\n  };\r\n\r\n  const onAddContactHandler = (event) => {\r\n    const { checked, id } = event.target;\r\n    const checkboxColumn = props.checkboxList.find(\r\n      (item) => `checkbox_${item.id}` === id\r\n    );\r\n    if (checkboxColumn) {\r\n      checkboxColumn.isMobileNumber = checked;\r\n    }\r\n  };\r\n\r\n  const checkboxListData = props.checkboxList.map((item, index) => (\r\n    <div key={index} className={classes.container}>\r\n      <Checkbox\r\n        key={item.id}\r\n        id={item.id}\r\n        value={item.name}\r\n        onClickHandler={onCheckboxClickHandler}\r\n      />\r\n      <Checkbox\r\n        key={`checkbox_${item.id}`}\r\n        id={`checkbox_${item.id}`}\r\n        value=\"Add as Contact\"\r\n        onClickHandler={onAddContactHandler}\r\n      />\r\n    </div>\r\n  ));\r\n\r\n  const onColumnListSubmit = () => {\r\n    const filteredColumnList = props.checkboxList.filter(\r\n      (item) => item.isChecked\r\n    );\r\n    props.submitList(filteredColumnList);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <h1>Choose column to display</h1>\r\n      </div>\r\n      <div>\r\n        <ul>{checkboxListData}</ul>\r\n        <Button\r\n          onButtonClick={onColumnListSubmit}\r\n          type=\"button\"\r\n          value=\"Start Now\"\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CheckboxList;\r\n","import { useState } from \"react\";\r\nimport Button from \"./UI/Button\";\r\n\r\nconst ContactDetails = (props) => {\r\n  const [currentNumberIndex, setCurrentNumberIndex] = useState(0);\r\n  const dataLength = props.data[0]?.data?.length;\r\n  const columnList = props.data.map((item, index) => {\r\n    let content = <h1 key={index}>{item.data[currentNumberIndex]}</h1>;\r\n    if (item.isMobileNumber) {\r\n      content = (\r\n        <div key={index}>\r\n          <h1>{item.data[currentNumberIndex]}</h1>\r\n          <a href={`tel:${item.data[currentNumberIndex]}`}>Call Now</a>\r\n        </div>\r\n      );\r\n    }\r\n    return content;\r\n  });\r\n  return (\r\n    <div>\r\n      {columnList}\r\n\r\n      {currentNumberIndex !== 0 && (\r\n        <Button\r\n          onButtonClick={() => setCurrentNumberIndex((prev) => prev - 1)}\r\n          type=\"button\"\r\n          value=\"Previous\"\r\n        />\r\n      )}\r\n      {currentNumberIndex !== dataLength - 1 && (\r\n        <Button\r\n          onButtonClick={() => setCurrentNumberIndex((prev) => prev + 1)}\r\n          type=\"button\"\r\n          value=\"Next\"\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ContactDetails;\r\n","import { useRef, useState, Fragment, useEffect } from \"react\";\nimport * as XLSX from \"xlsx\";\nimport Loader from \"react-loader-spinner\";\nimport CheckboxList from \"./components/UI/CheckboxList\";\nimport Button from \"./components/UI/Button\";\nimport ContactDetails from \"./components/ContactDetails\";\nimport \"./App.css\";\n\nfunction App() {\n  const [paraData, setParaData] = useState();\n  const [inputLabel, setInputLabel] = useState(\"Click Here...\");\n  const [loading, setLoading] = useState(false);\n  const [excelColumnList, setExcelColumnList] = useState([]);\n  const [columnsData, setColumnsData] = useState([]);\n  const fileInputRef = useRef();\n  const upload = () => {\n    const file = fileInputRef.current.files?.[0];\n    if (file) {\n      const reader = new FileReader();\n      const RABS = reader.readAsBinaryString;\n      reader.onload = (e) => {\n        const bstr = e.target.result;\n        const workbook = XLSX.read(bstr, { type: RABS ? \"binary\" : \"array\" });\n        const wsName = workbook.SheetNames[0];\n        const ws = workbook.Sheets[wsName];\n        console.log(RABS, workbook);\n        const data = XLSX.utils.sheet_to_json(ws, { header: 1 });\n        setParaData(data);\n      };\n      if (RABS) {\n        reader.readAsBinaryString(file);\n      } else {\n        reader.readAsArrayBuffer(file);\n      }\n    }\n  };\n\n  const fileInputHandler = (event) => {\n    const files = event.target.files;\n    setLoading(false);\n    if (files.length > 0) {\n      setInputLabel(files[0].name);\n    }\n  };\n\n  const onLabelClick = () => {\n    setLoading(true);\n    fileInputRef.current.click();\n  };\n\n  useEffect(() => {\n    if (paraData && paraData.length > 0) {\n      const columnList = [...paraData[0]];\n      const arrangedColumnList = columnList.map((item, index) => {\n        return { name: item, isChecked: false, id: index, isMobileNumber: false };\n      });\n      setExcelColumnList(arrangedColumnList);\n    }\n  }, [paraData]);\n\n  const submitListHanlder = (filterColumnList) => {\n    const data = [];\n\n    for (let column of filterColumnList) {\n      const columnData = { ...column };\n      columnData[\"data\"] = [];\n      data.push(columnData);\n    }\n\n    for (let i = 1; i < paraData.length; i++) {\n      for (let column of data) {\n        column.data.push(paraData[i][column.id]);\n      }\n    }\n    setColumnsData(data);\n  };\n\n  const allowedFileTypes =\n    \".csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-excel\";\n\n  return (\n    <div className=\"App\">\n      <div className=\"App-header\">PC to Mobile Calling APP</div>\n      {!paraData && (\n        <div>\n          <label>Chooese a excel file to read contact numbers</label>\n          <br />\n          <div className=\"files\">\n            <input\n              type=\"file\"\n              id=\"fileUpload\"\n              ref={fileInputRef}\n              accept={allowedFileTypes}\n              style={{ display: \"none\" }}\n              onChange={fileInputHandler}\n            />\n            {loading && (\n              <Fragment>\n                <Loader\n                  type=\"TailSpin\"\n                  color=\"#00BFFF\"\n                  height={80}\n                  width={80}\n                />\n                <p>Loading, Please wait...</p>\n              </Fragment>\n            )}\n            {!loading && (\n              <label\n                htmlFor=\"fileUpload\"\n                id=\"fileUploadLabel\"\n                onClick={onLabelClick}\n              >\n                {inputLabel}\n              </label>\n            )}\n            <Button onButtonClick={upload} type=\"button\" value=\"Upload\" />\n          </div>\n        </div>\n      )}\n      <div>\n        {columnsData.length === 0 && excelColumnList.length > 0 && (\n          <CheckboxList\n            checkboxList={excelColumnList}\n            submitList={submitListHanlder}\n          />\n        )}\n        {columnsData.length > 0 && <ContactDetails data={columnsData} />}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.Fragment>\n    <App />\n  </React.Fragment>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}